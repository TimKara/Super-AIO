#!/bin/bash

# 
# This file originates from Kite's Super AIO control board project.
# Author: Kite (Giles Burgess)
# 
# THIS HEADER MUST REMAIN WITH THIS FILE AT ALL TIMES
#
# This firmware is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This firmware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this repo. If not, see <http://www.gnu.org/licenses/>.
#

if [ $# == 0 ] ; then
  echo "Usage: ./<cmd> <ORIGINAL.img> [branch]"
  exit 1
fi

#####################################################################
# Vars
USER=$(users)
BUILD="SAIO_"$(date +"%Y%m%d-%H%M%S")
INFILE=$1
GITHUB="https://github.com/geebles/Super-AIO"
GITHUBDIR="Super-AIO"
MOUNT="mnt"
PIHOMEDIR="$MOUNT/home/pi"
CRONRAW="# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (cronSAIO.txt installed on Sun Jan 15 17:10:21 2017)
# (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)
@reboot /usr/bin/nice -n 19 /usr/bin/python /home/pi/Super-AIO/release/saio/saio-osd.py
"
if [[ $2 != "" ]] ; then
  BRANCH=$2
else
  BRANCH="master"
fi

#####################################################################
# Functions
execute() { #STRING
  if [ $# != 1 ] ; then
    echo "ERROR: No args passed"
    exit 1
  fi
  cmd=$1
  
  echo "[*] EXECUTE: [$cmd]"
  eval "$cmd"
  ret=$?
  
  if [ $ret != 0 ] ; then
    echo "ERROR: Command exited with [$ret]"
    exit 1
  fi
  
  return 0
}

exists() { #FILE
  if [ $# != 1 ] ; then
    echo "ERROR: No args passed"
    exit 1
  fi
  
  file=$1
  
  if [ -f $file ]; then
    echo "[i] FILE: [$file] exists."
    return 0
  else
    echo "[i] FILE: [$file] does not exist."
    return 1
  fi
}

#####################################################################
# LOGIC!
echo "STARTING BUILD [$BUILD].."

# Sanity check INFILE
if ! exists $INFILE ; then
  echo "ERROR: INFILE [$INFILE] doesn't exist"
  exit 1
fi

OUTFILE=$(basename $INFILE .img)"_$BUILD.img"
ZIPFILE=$(basename $INFILE .img)"_$BUILD.zip"

# Sanity check OUTFILE
if exists $OUTFILE ; then
  echo "ERROR: OUTFILE [$OUTFILE] exists! Can't create new image"
  exit 1
fi

# Check the mounted dir is clean
MNTDIRCLEANCOUNT=$(ls $MOUNT | wc -l)
if [ $MNTDIRCLEANCOUNT != 0 ] ; then
  echo "ERROR: Mount dir [$MOUNT] is not empty [$MNTDIRCLEANCOUNT], perhaps something is mounted on it?"
  exit 1
fi

# Copy img to new + name
execute "cp $INFILE $OUTFILE"

# Clean github dirs
if [ -d $GITHUBDIR ] ; then
  execute "rm -rf $GITHUBDIR"
fi

# Checkout code and remove anything unnecessary
execute "git clone --recursive --depth 1 --branch $BRANCH $GITHUB"
execute "rm -rf $GITHUBDIR/docs"

#####################################################################
# Mount img p1
execute "mount -o loop,offset=4194304 $OUTFILE $MOUNT"

# Copy required to p1
execute "cp $MOUNT/config.txt $MOUNT/config_ORIGINAL.txt"
execute "cp $GITHUBDIR/release/saio/config.txt $MOUNT/config.txt"
execute "cp $GITHUBDIR/release/saio/config-saio.txt $MOUNT/config-saio.txt"

# Unmount
execute "umount $MOUNT"

#####################################################################
# Mount img p2
execute "mount -o loop,offset=63963136 $OUTFILE $MOUNT"

# Copy required to p2
execute "cp -r $GITHUBDIR $PIHOMEDIR"
execute "chown -R $USER:$USER $PIHOMEDIR"
execute "cp $GITHUBDIR/release/saio/asound.conf $MOUNT/etc/asound.conf"

# Copy autostart
execute "mv $MOUNT/opt/retropie/configs/all/autostart.sh $MOUNT/opt/retropie/configs/all/autostart_OLD.sh"
execute "cp $GITHUBDIR/release/saio/autostart.sh $MOUNT/opt/retropie/configs/all/autostart.sh"
execute "chown $USER:$USER $MOUNT/opt/retropie/configs/all/autostart.sh"

# Copy cron
execute "echo '$CRONRAW' > $MOUNT/var/spool/cron/crontabs/pi"
execute "chmod 600 $MOUNT/var/spool/cron/crontabs/pi"
execute "chown $USER:crontab $MOUNT/var/spool/cron/crontabs/pi"

# Chmod required in p2
execute "chmod +x $PIHOMEDIR/$GITHUBDIR/release/saio/osd/saio-osd"
execute "chmod +x $PIHOMEDIR/$GITHUBDIR/release/saio/flash/flash.sh"
execute "chmod +x $PIHOMEDIR/$GITHUBDIR/release/saio/rfkill/rfkill"
execute "chmod +x $PIHOMEDIR/$GITHUBDIR/release/tester/pngview"

# Install python-serial
execute "dpkg -x $GITHUBDIR/release/saio/python-serial_2.6-1.1_all.deb $GITHUBDIR/python-serial"
execute "cp -r $GITHUBDIR/python-serial/* $MOUNT"

# Fix splashsreen sound
execute "sed -i \"s/ *both/ alsa/\" $MOUNT/etc/init.d/asplashscreen"
execute "sed -i \"s/ -b/ -o alsa -b/\" $MOUNT/home/pi/RetroPie-Setup/scriptmodules/supplementary/splashscreen.sh"

# Fix N64 audio
execute "sed -i \"s/mupen64plus-audio-omx/mupen64plus-audio-sdl/\" $MOUNT/opt/retropie/emulators/mupen64plus/bin/mupen64plus.sh"

# Install the pixel theme and set it as default
execute "mkdir -p $MOUNT/etc/emulationstation/themes"
execute "rm -rf $MOUNT/etc/emulationstation/themes/pixel"
execute "git clone --recursive --depth 1 --branch master https://github.com/krextra/es-theme-pixel.git $MOUNT/etc/emulationstation/themes/pixel"
execute "cp $GITHUBDIR/release/saio/es_settings.cfg $MOUNT/opt/retropie/configs/all/emulationstation/es_settings.cfg"
execute "sed -i \"s/carbon/pixel/\" $MOUNT/opt/retropie/configs/all/emulationstation/es_settings.cfg"
execute "chown $USER:$USER $MOUNT/opt/retropie/configs/all/emulationstation/es_settings.cfg"

# Enable 30sec autosave on roms
execute "sed -i \"s/# autosave_interval =/autosave_interval = \"30\"/\" $MOUNT/opt/retropie/configs/all/retroarch.cfg"

# Unmount
execute "umount $MOUNT"

#####################################################################
# Zip
execute "zip $ZIPFILE $OUTFILE"

#####################################################################
# DONE
echo "DONE!"
